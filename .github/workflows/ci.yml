name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  SWIFT_VERSION: '5.10'

jobs:
  # Primary CI on Linux (cheapest runners)
  swift-linux:
    name: Swift Tests (Linux)
    runs-on: ubuntu-latest
    container:
      image: swift:5.9
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache Swift Package Manager dependencies
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-linux-spm-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-linux-spm-

    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y libssl-dev

    - name: Resolve Swift dependencies
      run: swift package resolve

    - name: Build Swift package
      run: swift build --verbose

    - name: Run Swift tests
      run: swift test --verbose --parallel

    - name: Build all products (debug)
      run: swift build --verbose

    - name: Build all products (release)
      run: swift build -c release --verbose

    - name: Test executables can run
      run: |
        # Test that executables can at least start (show help/version)
        ./.build/release/swiftralino --help || echo "CLI help failed"
        ./.build/release/swiftralino-demo --help || echo "Demo help failed"  
        ./.build/release/swiftralino-headless --help || echo "Headless help failed"

  # Web component testing (Linux)
  web-component:
    name: Web Component
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Sources/SwiftralinoWebView
    steps:
    - uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: Sources/SwiftralinoWebView/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('Sources/SwiftralinoWebView/bun.lockb', 'Sources/SwiftralinoWebView/package.json') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Type check
      run: bun run type-check

    - name: Lint
      run: bun run lint

    - name: Format check
      run: bun run format:check

    - name: Run tests
      run: bun run test

    - name: Build
      run: bun run build

    - name: Upload web build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build-linux
        path: Sources/SwiftralinoWebView/dist/
        retention-days: 7

  # Docker build test (Linux)
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: swiftralino:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Linting (Linux with SwiftLint)
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    container:
      image: swift:5.9
    steps:
    - uses: actions/checkout@v4

    - name: Install SwiftLint
      run: |
        apt-get update
        apt-get install -y curl
        # Install SwiftLint for Linux
        curl -L https://github.com/realm/SwiftLint/releases/download/0.54.0/swiftlint_linux.zip -o swiftlint.zip
        unzip swiftlint.zip
        chmod +x swiftlint
        mv swiftlint /usr/local/bin/

    - name: Run SwiftLint
      run: swiftlint --strict

  # Platform-specific verification (only when needed)
  platform-verification:
    name: Platform Verification
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'platform-test')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-14
            name: macOS
          - os: windows-latest 
            name: Windows
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Setup Swift (Windows)
      if: runner.os == 'Windows'
      uses: SwiftyLab/setup-swift@latest
      with:
        swift-version: ${{ env.SWIFT_VERSION }}

    - name: Cache Swift Package Manager dependencies
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "macOS Swift version: $(swift --version)"
        echo "Xcode version: $(xcodebuild -version)"

    - name: Resolve Swift dependencies
      run: swift package resolve

    - name: Build Swift package
      run: swift build --verbose

    - name: Run platform-specific tests
      run: swift test --verbose --parallel

    - name: Test platform-specific executables
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          ./.build/debug/swiftralino.exe --help || echo "CLI help failed on Windows"
        else
          ./.build/debug/swiftralino --help || echo "CLI help failed on ${{ matrix.name }}"
        fi

  # Summary job that depends on core Linux jobs
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [swift-linux, web-component, docker-build, lint-and-format]
    if: always()
    steps:
    - name: Check all jobs succeeded
      run: |
        if [[ "${{ needs.swift-linux.result }}" != "success" ]]; then
          echo "Swift Linux tests failed"
          exit 1
        fi
        if [[ "${{ needs.web-component.result }}" != "success" ]]; then
          echo "Web component tests failed" 
          exit 1
        fi
        if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "Docker build failed"
          exit 1  
        fi
        if [[ "${{ needs.lint-and-format.result }}" != "success" ]]; then
          echo "Linting failed"
          exit 1
        fi
        echo "All core CI jobs passed! âœ…" 